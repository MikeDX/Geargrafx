
CXX = g++
#CXX = clang++

EXE = geargrafx

GIT_VERSION := "$(shell git describe --abbrev=7 --dirty --always --tags)"

EMULATOR_SRC=../../src
EMULATOR_SHARED_DESKTOP_SRC=../shared/desktop


SOURCES = $(EMULATOR_DESKTOP_SHARED_SRC)/main.cpp

OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))

UNAME_S := $(shell uname -s)

CXXFLAGS = -I../ -I../../
CXXFLAGS += -Wall -Wextra -Wformat -std=c++11 -DEMULATOR_BUILD=\"$(GIT_VERSION)\"
LIBS =

DEBUG ?= 0
ifeq ($(DEBUG), 1)
    CXXFLAGS +=-DDEBUG -g3
else
    CXXFLAGS +=-DNDEBUG -O3 -flto=auto
endif

SANITIZE ?= 0
ifeq ($(SANITIZE), 1)
	CXXFLAGS +=-fsanitize=address
    LIBS += -lasan
endif

##---------------------------------------------------------------------
## BUILD FLAGS PER PLATFORM
##---------------------------------------------------------------------

ifeq ($(UNAME_S), Linux) #LINUX
	ECHO_MESSAGE = "Linux"
	LIBS += -lGL -lGLEW -ldl `sdl2-config --libs`

	CXXFLAGS += `sdl2-config --cflags`
	CFLAGS += $(CXXFLAGS)
else ifeq ($(UNAME_S), Darwin) #APPLE
	ECHO_MESSAGE = "macOS"
	LIBS += -framework OpenGL -framework Cocoa -framework IOKit -framework CoreVideo `sdl2-config --libs`
	LIBS += -L/usr/local/lib

	CXXFLAGS += `sdl2-config --cflags`
	CXXFLAGS += -I/usr/local/include -I/opt/local/include
	CFLAGS += $(CXXFLAGS)
else ifeq ($(findstring MINGW,$(UNAME_S)),MINGW)
	ECHO_MESSAGE = "MinGW"
	LIBS += -lgdi32 -lopengl32 -lglew32 -limm32 `pkg-config --static --libs sdl2`

	CXXFLAGS += `pkg-config --cflags sdl2`
	CFLAGS += $(CXXFLAGS)
else
	ECHO_MESSAGE = "Generic Unix-like/BSD"
	LIBS += `sdl2-config --libs` -lSDL2
	LIBS += `pkg-config --libs glew` -lGLEW

	CXXFLAGS += -std=gnu++11
	CXXFLAGS += `sdl2-config --cflags`
	CXXFLAGS += `pkg-config --cflags glew`
	CFLAGS += $(CXXFLAGS)
endif

##---------------------------------------------------------------------
## BUILD RULES
##---------------------------------------------------------------------

%.o:$(IMGUI_SRC)/%.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

%.o:$(EMULATOR_SHARED_DESKTOP_SRC)/%.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

all: $(EXE)
	@echo Build complete for $(ECHO_MESSAGE)

$(EXE): $(OBJS)
	$(CXX) -o $@ $^ $(LDFLAGS) $(LIBS)

clean:
	rm -f $(EXE) $(OBJS)